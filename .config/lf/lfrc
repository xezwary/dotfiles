# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set drawbox
set period 1
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/preview'
set preview
set ignorecase true

# cmds/functions
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd touch $:>> "$(echo $* | tr ' ' '\ ')"
cmd chmod $set -f&&for file in "$fx";do chmod $* $file;done&&lf -remote 'send reload'

cmd trash $set -f&&gio trash -- $fx
cmd empty $set -f&&gio trash --empty

cmd bulkrename $set -f&&vimv $(realpath --relative-to=$PWD -- $fx)

cmd open-with %"$@" $f

cmd compress !set -f&&zip -r "$(echo $* | tr ' ' '\ ').zip" $(realpath --relative-to=$PWD $fx)
cmd extractaunpack !set -f&&aunpack -- $fx
cmd extractunar !set -f&&unar -d -- $fx

cmd pasteinsert &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd pasteoverwrite &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) \cp -af -- "$@" . ;;
        move) mv -f -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd links %{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  if [ "$#" -lt 1 ]; then
    echo "no files to link"
    exit 0
  fi
  ln -sr -t . -- "$@"
  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}

cmd linkh %{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  if [ "$#" -lt 1 ]; then
    echo "no files to link"
    exit 0
  fi
  ln -t . -- "$@"
  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}

# Bindings
map DD trash
map <c-r> reload
map <backspace> set hidden!
map <backspace2> set hidden!
map w
map s shell
map S $$SHELL
map @ push :%<space>"$f"<home><c-f>
map r $mimeopen --ask $f
map R $mimeopen -d $f
#execute file
map x $$f
map X !$f
map e
map E $$EDITOR "$f"

map ee $tmux split-window -v $EDITOR "$f"
map eE $tmux split-window -h $EDITOR "$f"
map es $tmux split-window -v -c "$PWD"
map eS $tmux split-window -v -c "$PWD" ~/Programs/lfub 
map ev $tmux split-window -h -c "$PWD"
map eV $tmux split-window -h -c "$PWD" ~/Programs/lfub
map ew $tmux new-window -c "$PWD"
map eW $tmux new-window -c "$PWD" ~/Programs/lfub

map gi $lf -remote "send $id cd /run/media/$USER"
map gm cd /media
map gr cd /
map gd cd /dev
map ge cd /etc
map gM cd /mnt
map go cd /opt
map gs cd /srv
map gp cd /tmp
map gu cd /usr
map gv cd /var

map <f-7> push :mkdir<space>
map <insert> push :touch<space>

map A rename # at the very end
map c
#map cw push A<c-u> # new rename
# rename, vimv if several items are selected
map cw $set -f&&[[ $(echo "$fx"|wc -l)>1 ]]&&vimv $(realpath --relative-to=$PWD -- $fx)&&exit 0;lf -remote "send $id push A<c-u>"
map I push A<c-a> # at the very beginning
map a push A<a-b><c-b> # before extention

map u
map uv unselect
map uy clear
map um %umount -l -- "$f"

map y
map yy copy
map yp $printf "%s" "$fx" | xclip -selection clipboard
map yn $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
map d
map dd cut
map du !clear&&du --max-depth=1 -h --apparent-size
map dU !clear&&du --max-depth=1 -h --apparent-size | sort -rh
map df !clear&&df -h |grep -E "/dev/sd|/dev/nvme|Filesystem "

map p
map pi pasteinsert
map po pasteoverwrite
map pp paste
map pl links
map pL linkh

map sn
map ss
map st
map sa
map sc
map se

map o
map on :set sortby natural; set info
map os :set sortby size; set info size
map om :set sortby time; set info time
map oa :set sortby atime; set info atime
map oc :set sortby ctime; set info ctime
map oe :set sortby ext; set info
map zr
map or :set reverse!

map +X $chmod +X "$f"
map +r $chmod +r "$f"
map +s $chmod +s "$f"
map +t $chmod +t "$f"
map +w $chmod +w "$f"
map +x $chmod +x "$f"

map -X $chmod -X "$f"
map -r $chmod -r "$f"
map -s $chmod -s "$f"
map -t $chmod -t "$f"
map -w $chmod -w "$f"
map -x $chmod -x "$f"
