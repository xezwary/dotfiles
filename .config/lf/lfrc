# This config basically turns lf into Ranger with added features that I like.

###My setup uses:
###Kitty bash zsh ffmpeg trash-cli chafa nerd-fonts-terminus glow odt2txt catdoc docx2txt gnumeric xclip vimv nsxiv mpv atool unar 7z mcomix wine
###Also luke's transadd script, proton-ge

# basic vars
set shellopts '-eu'
set ifs "\n"
set filesep "\n"
set ignorecase
set incsearch
set findlen 2
set period 1
set cursorpreviewfmt "\033[7m"
set scrolloff 8
set ratios 2:5:7
set drawbox
set icons
set preview
set previewer '~/.config/lf/preview'
set cleaner '~/.config/lf/cleaner'

# cmds/functions
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

cmd mkdir &set -f&&mkdir -p -- "$(echo $* | tr ' ' '\ ')";lf -remote "send $id reload"
cmd touch &set -f&&:>> "$(echo $* | tr ' ' '\ ')";lf -remote "send $id reload"
cmd chmod &set -f&&chmod $* -- $fx;lf -remote "send $id reload"
cmd bulkrename $set -f&&vimv $(realpath -s --relative-to=$PWD -- $fx|sed -e "s|^./||");lf -remote "send $id reload"

cmd trash &set -f&&trash-put -- $fx;lf -remote "send $id load"
cmd empty %set -f&&trash-empty;lf -remote "send $id reload"
cmd restore $clear;tput cup $(($(tput lines)/3));trash-restore;lf -remote "send $id reload"

cmd open-with %"$@" $f
cmd toggle-preview %[[ "$lf_preview" = "true" ]]&&lf -remote "send $id :set preview false; set ratios 1:6"||lf -remote "send $id :set preview true; set ratios 2:5:7"

cmd sel-add &set +u&&mode="$1"&&files="$(comm --output-delimiter="" -23 <(printf "$fx"|sort) <(tail -n+2 ~/.local/share/lf/files|sort))"&&[[ $(echo "$files"|wc -w) < 1 ]]&&exit 0||[[ $(echo "$mode"|grep -E "copy|move"|wc -w) > 0 ]]||read -r mode<~/.local/share/lf/files;sed -i "1s/.*/$mode/" ~/.local/share/lf/files&&echo "$files">> ~/.local/share/lf/files&&lf -remote "send $id :unselect; sync"
cmd sel-remove &set +u&&mode="$1"&&[[ $(echo "$mode"|grep -E "copy|move"|wc -w) > 0 ]]||read -r mode<~/.local/share/lf/files;sed -i "1s/.*/$mode/" ~/.local/share/lf/files&&while read -r file; do file=$(echo "$file"|sed -e 's/[][\.$*]/\\&/g')&&sed -i "\|$file|d" ~/.local/share/lf/files;done <<< "$fx"&&lf -remote "send $id :unselect; sync"
cmd sel-toggle &set +u&&mode="$1"&&[[ $(echo "$mode"|grep -E "copy|move"|wc -w) > 0 ]]||read -r mode<~/.local/share/lf/files;files=$(comm --output-delimiter="" -3 <(tail -n +2 ~/.local/share/lf/files|sort) <(printf "$fx"|sort)|tr -d '\0')&&[[ $(echo "$files"|wc -w) < 1 ]]&&echo "$mode"> ~/.local/share/lf/files||echo -e "$mode\n$files"> ~/.local/share/lf/files;lf -remote "send $id :unselect; sync"

#archives
cmd compress !set -f&&zip -r "$(echo $* | tr ' ' '\ ').zip" $(realpath -s --relative-to=$PWD -- $fx)
cmd extractaunpack !set -f&&for file in $fx;do aunpack -- $file;done
cmd extractunar !set -f&&for file in $fx;do unar -d -- $file;done

# open handler
cmd open ${{
  case "$f" in
    #torrents
    *.torrent)
      transmission-show "$f" | "$PAGER"
    ;;
    #archives
    *.7z)
      7z -p l "$f" | "$PAGER"
    ;;
    *.ace|*.ar|*.arc|*.tbz|*.tbz2|*.bz2|*.cab|*.cpio|*.cpt|*.deb|*.dgc|*.dmg|*.gz|*.jar|*.msi|*.pkg|*.rar|*.shar|*.tar|*.tgz|*.xar|*.xpi|*.xz|*.zip)
      als -- "$f" | "$PAGER"
    ;;
    *.iso)
      iso-info -l -i -- "$f" | "$PAGER"
    ;;
    *.cbr|*.cbt|*.cbz|*.cb7)
      setsid -f mcomix -- "$f"
    ;;

    #video/audio -- force gui window if video files are present
    *.mp4|*.webm|*.mkv|*.mp3|*.flac|*.m4a|*.m4v|*.aac|*.ogg|*.wav|*.wmv|*.avi|*.ts|*.m3u|*.pls)
      isvideo=0&&for i in $fx;do [[ $(ffprobe -show_entries stream=codec_name -v quiet -of csv="p=0" -select_streams V -- "$i"|wc -l) == 0 ]]||isvideo=1;done&&[[ $isvideo == 0 ]]&&(clear;tput cup $(($(tput lines)/3));mpv --audio-display=no -- $fx)||[[ $isvideo == 0 ]]&&exit 0;__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia setsid -f mpv --no-terminal --force-window --quiet -- $fx >/dev/null 2>&1
    ;;
 
    #images -- sends file list of current directory, or selection if multiple files
    ##feh
    #*.jpg|*.png|*.jpeg|*.JPG|*.JPEG|*.PNG|*.webp|*.ico|*.tga)
    #  [[ $(echo "$fx"|wc -l) == 1 ]]&&find . -maxdepth 1 -regextype posix-extended -iregex '.*(jpg|png|jpeg|webp|ico|tga)'|sort -fV|feh --start-at "$(basename $f)" -f- -- >/dev/null 2>&1||for i in $fx;do echo $i;done|sort -fV|feh -f- -- >/dev/null 2>&1 & ;;
    ##nsxiv
    #*.jpg|*.png|*.jpeg|*.JPG|*.JPEG|*.PNG|*.webp|*.ico|*.tga|*.gif)
    #  [[ $(echo "$fx"|wc -l) == 1 ]]&&imagelist=$(find . -maxdepth 1 -regextype posix-extended -iregex '.*(jpg|png|jpeg|webp|ico|tga|gif)'|sort -fV)&&for i in $imagelist;do echo $i;done|nsxiv -g 2560x1440 -s f -a -q -n $(echo "${imagelist[*]}"|grep --line-number --fixed-strings -- "./$(basename $f)"|cut -f1 -d:) -- -||for i in $fx;do echo $i;done|sort -fV|nsxiv -g 2560x1440 -s f -a -q -- - &
    #;;

    #Documents
    *.pdf)
      setsid -f zathura -- "$f"
    ;;
    *.md)
      glow -s dark -- "$f" | "$PAGER"
    ;;

    # mimetype
    *) case $(file --mime-type -Lb -- "$f") in
      #text
      text/*|application/json|inode/x-empty)
        $EDITOR -- "$f" 
      ;;
      #video
      video/*)
        __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia setsid -f mpv --no-terminal --force-window --quiet -- "$f" >/dev/null 2>&1
      ;;
      #audio
      audio/*)
        mpv --audio-display=no -- "$f"
      ;;
      #images
      image/*)
        [[ $(echo "$fs"|wc -w) == 0 ]]&&imagelist=$(find -L . -maxdepth 1 -type f|sort -fV)&&for i in $imagelist;do echo $i;done|setsid -f nsxiv -g 2560x1440 -s f -a -q -n $(echo "${imagelist[*]}"|grep -n -- "./$(basename $f|sed -e 's/[][\.$*]/\\&/g')$"|cut -f1 -d:) -- -||for i in $fx;do echo $i;done|sort -fV|setsid -f nsxiv -g 2560x1440 -s f -a -q -- -
      ;;
      #other
      *)
        mimeopen --ask -- "$f"
      ;;
    esac
  esac
}}

cmd openrifle ${{
  clear&&tput cup $(($(tput lines)/3))&&tput bold&&cnum="first"&&fmime=$(file --mime-type -Lb -- "$f")&&f1=$(echo "$f"|tr "[:upper:]" "[:lower:]")&&for ((loopnum=1;loopnum<=2;loopnum++));do iternum=0&&[[ $loopnum == 2 ]]&&[[ $cnum == "" ]]&&break
##Torrents
  [[ $(echo $f|grep -E "\.torrent$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - transadd"&&[[ $cnum == $iternum ]]&&(transadd "$f"&&clear;exit 0)
  [[ $(echo $f|grep -E "\.torrent$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - qbittorrent"&&[[ $cnum == $iternum ]]&&(setsid -f qbittorrent "$f";exit 0)
##Archives
#unar
  [[ $(echo $f1|grep -E "\.cbr$|\.cbt$|\.cbz$|\.cb7$|\.rar$|\.zip$|\.7z$|\.ace$|\.ar$|\.arc$|\.tbz$|\.tbz2$|\.bz2$|\.cab$|\.cpio$|\.cpt$|\.deb$|\.dgc$|\.dmg$|\.gz$|\.jar$|\.msi$|\.pkg$|\.shar$|\.tar$|\.tgz$|\.xar$|\.xpi$|\.xz$|\.iso$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - unar"&&[[ $cnum == $iternum ]]&&(lf -remote "send $id extractunar";exit 0)
#aunpack
  [[ $(echo $f1|grep -E "\.cbr$|\.cbt$|\.cbz$|\.cb7$|\.rar$|\.zip$|\.7z$|\.ace$|\.ar$|\.arc$|\.tbz$|\.tbz2$|\.bz2$|\.cab$|\.cpio$|\.cpt$|\.deb$|\.dgc$|\.dmg$|\.gz$|\.jar$|\.msi$|\.pkg$|\.shar$|\.tar$|\.tgz$|\.xar$|\.xpi$|\.xz$|\.zst$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - aunpack"&&[[ $cnum == $iternum ]]&&(lf -remote "send $id extractaunpack";exit 0)
##Documents
#Zathura
  [[ $(echo $f1|grep -E "\.pdf$|\.epub$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Zathura"&&[[ $cnum == $iternum ]]&&(setsid -f zathura -- "$f";exit 0)
#Libreoffice
  [[ $(echo $f1|grep -E "\.pptx?$|\.od[dfgpst]$|\.docx?$|\.sxc$|\.xlsx?$|\.xlt$|\.xltx$|\.xlw$|\.gnm$|\.gnumeric$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Libreoffice"&&[[ $cnum == $iternum ]]&&(setsid -f libreoffice "$f";exit 0)
#MComix
  [[ $(echo $f1|grep -E "\.cbr$|\.cbt$|\.cbz$|\.cb7$|\.rar$|\.zip$|\.7z$|\.pdf$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - MComix"&&[[ $cnum == $iternum ]]&&(setsid -f mcomix -- "$f";exit 0)
#Zathura - comics
  [[ $(echo $f1|grep -E "\.cbr$|\.cbt$|\.cbz$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Zathura"&&[[ $cnum == $iternum ]]&&(setsid -f zathura -- "$f";exit 0)
#Calibre ebook-viewer
  [[ $(echo $f1|grep -E "\.azw$|\.azw1$|\.azw2$|\.azw3$|\.cbr$|\.cbz$|\.docx$|\.epub$|\.mobi$|\.odt$|\.pdf$|\.rtf$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Calibre"&&[[ $cnum == $iternum ]]&&(ebook-viewer --detach -- "$f";exit 0)
#unar
  [[ $(echo $f1|grep -E "\.pdf$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - unar"&&[[ $cnum == $iternum ]]&&(lf -remote "send $id extractunar";exit 0)
##Executables
#Wine
  [[ $(echo $f1|grep -E "\.exe$|\.x86$|\.x86_64$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Wine"&&[[ $cnum == $iternum ]]&&(DRI_PRIME=1 VKD3D_FEATURE_LEVEL=12_1 VKD3D_CONFIG=dxr,dxr11 RADV_PERFTEST_RT=1 setsid -f gamemoderun wine "$f" >/dev/null 2>&1;exit 0)
#Proton
  [[ $(echo $f1|grep -E "\.exe$|\.x86$|\.x86_64$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Proton"&&[[ $cnum == $iternum ]]&&(DRI_PRIME=1 VKD3D_FEATURE_LEVEL=12_1 VKD3D_CONFIG=dxr,dxr11 RADV_PERFTEST_RT=1 setsid -f gamemoderun ~/.local/share/Steam/compatibilitytools.d/GE-Proton/files/bin/wine "$f" >/dev/null 2>&1;exit 0)
##Images
#nsxiv
  [[ $(echo $fmime|grep "image/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - nsxiv"&&[[ $cnum == $iternum ]]&&(lf -remote "send $id open";exit 0)
#GIMP
  [[ $(echo $f1|grep -E "\.dds$"|wc -l) > 0 ]]||[[ $(echo $fmime|grep "image/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - GIMP"&&[[ $cnum == $iternum ]]&&(setsid -f gimp -- $f >/dev/null 2>&1;exit 0)
##Video/audio
#MPV
  [[ $(echo $f1|grep -E "\.mp4$|\.webm$|\.mkv$|\.mp3$|\.flac$|\.m4a$|\.m4v$|\.aac$|\.ogg$|\.wav$|\.wmv$|\.avi$|\.ts$|\.m3u$|\.pls$"|wc -l) > 0 ]]||[[ $(echo $fmime|grep -E "video/|audio/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - MPV"&&[[ $cnum == $iternum ]]&&(lf -remote "send $id open";exit 0)
#VLC
  [[ $(echo $f1|grep -E "\.mp4$|\.webm$|\.mkv$|\.m4v$|\.wmv$|\.avi$|\.ts$|\.m3u$|\.pls$"|wc -l) > 0 ]]||[[ $(echo $fmime|grep "video/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - VLC"&&[[ $cnum == $iternum ]]&&(QT_SCALE_FACTOR=2 setsid -f vlc -- "$f" >/dev/null 2>&1;exit 0)
#MPV audio only
  [[ $(echo $f1|grep -E "\.mp4$|\.webm$|\.mkv$|\.mp3$|\.flac$|\.m4a$|\.m4v$|\.aac$|\.ogg$|\.wav$|\.wmv$|\.avi$|\.ts$|\.m3u$|\.pls$"|wc -l) > 0 ]]||[[ $(echo $fmime|grep -E "video/|audio/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - MPV --no-video"&&[[ $cnum == $iternum ]]&&(clear&&mpv --no-video -- $fx;exit 0)
#MPV force window
  [[ $(echo $f1|grep -E "\.mp4$|\.webm$|\.mkv$|\.mp3$|\.flac$|\.m4a$|\.m4v$|\.aac$|\.ogg$|\.wav$|\.wmv$|\.avi$|\.ts$|\.m3u$|\.pls$"|wc -l) > 0 ]]||[[ $(echo $fmime|grep -E "video/|audio/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - MPV --force-window"&&[[ $cnum == $iternum ]]&&(clear&&setsid -f mpv --force-window --no-terminal --quiet -- $fx >/dev/null 2>&1;exit 0)
#Tenacity
  [[ $(echo $fmime|grep "audio/"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Tenacity"&&[[ $cnum == $iternum ]]&&(setsid -f org.tenacityaudio.Tenacity -- $f >/dev/null 2>&1;exit 0)
###Other
#engrampa
  [[ $(echo $f1|grep -E "\.cbr$|\.cbt$|\.cbz$|\.cb7$|\.rar$|\.zip$|\.7z$|\.ace$|\.ar$|\.arc$|\.tbz$|\.tbz2$|\.bz2$|\.cab$|\.cpio$|\.cpt$|\.deb$|\.dgc$|\.dmg$|\.gz$|\.jar$|\.msi$|\.pkg$|\.shar$|\.tar$|\.tgz$|\.xar$|\.xpi$|\.xz$|\.zst$"|wc -l) > 0 ]]&&iternum=$(($iternum+1))&&echo "$iternum - Engrampa"&&[[ $cnum == $iternum ]]&&(setsid -f engrampa -- "$f" >/dev/null 2>&1;exit 0)

  [[ $iternum == 0 ]]&&break||until [[ $(echo $cnum|grep -E "^[0-9]+$"|wc -l) > 0 ]]||[[ $cnum == "" ]];do echo -n "Open with: "&&read cnum;done
done;clear
}}

#paste, with option for overwrite or skip, copy shows progress
cmd pasteand &{{
  overwrite="$1"
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  case "$mode" in
    copy)
      if [ $overwrite == 'skip' ]; then
        rsync -av --ignore-existing --progress -- "$@" . |
        stdbuf -i0 -o0 -e0 tr '\r' '\n' |
        while IFS= read -r line; do
          lf -remote "send $id echo $line"
        done
      else
        rsync -av --ignore-times --progress -- "$@" . |
        stdbuf -i0 -o0 -e0 tr '\r' '\n' |
        while IFS= read -r line; do
          lf -remote "send $id echo $line"
        done
      fi
    ;;
    move)[[ $overwrite == 'skip' ]]&&mv -n -- "$@" .||mv -f -- "$@" .;;
  esac
  echo "$mode"> ~/.local/share/lf/files
  lf -remote "send $id clear"
}}

cmd symlink &{{
  linktype=$1
  set -- $(cat ~/.local/share/lf/files)
  shift
  if [ "$#" -lt 1 ]; then
    lf -remote "send $id echo no files to link"
    exit 0
  fi
  for i in "$@";do f=$(basename "$i")&&[[ -e "./$f" || -L "./$f" ]]&&num=1&&until [[ ! -e "./$f" && ! -L "./$f" ]];do f="$(basename $i)~$num~"&&num=$((++num));done;[[ "$linktype" == "relative" ]]&&ln -sr -T "$(realpath -s --relative-to=$PWD -- $i)" -- "./$f"||ln -s -T "$i" -- "./$f";done
  echo "$mode"> ~/.local/share/lf/files
  lf -remote "send $id :clear; reload"
}}

# bindings
map gc :quit
map <c-w> :quit
map DD trash
map <c-r> reload
map <backspace> set hidden!
map <backspace2> set hidden!
map <enter> open
#shell
map s shell
map S $$SHELL
map @ push :%<space>"$f"<home><c-f>
#View processes in htop
map w $htop -p `pstree -p $KITTY_PID | perl -ne 'push @t, /\((\d+)\)/g; END { print join ",", @t }'`
#file handling
map e
map E $$EDITOR -- "$f"
map t &{{#Tag
  set -f&&[[ $(echo "$fx"|wc -l)>1 ]]&&lf -remote "send $id tag-toggle"||lf -remote "send $id :tag-toggle; down"}}
#map r $mimeopen --ask -- "$f"
map r openrifle
map i ${{#Fullscreen preview
  [[ $(file --mime-type -Lb -- "$f"|grep -E "video/|image/"|wc -l) > 0 ]]&&~/.config/lf/preview "$f"||([[ -d "$f" ]]||~/.config/lf/preview "$f"|$PAGER);kitty icat --clear}}
#set default for opening file
map R $mimeopen -d -- "$f"
#execute file
map x $$f
map X !$f

# command mode
cmap <tab> cmd-menu-complete

# kitty keybinds
map ee $kitten @launch --type window --location vsplit --copy-env $EDITOR "$f"
map eE $kitten @launch --type window --location hsplit --copy-env $EDITOR "$f"
map es $kitten @launch --type window --location hsplit --copy-env --cwd $PWD
map eS $kitten @launch --type window --location hsplit --copy-env lf -- $PWD
map ev $kitten @launch --type window --location vsplit --copy-env --cwd $PWD
map eV $kitten @launch --type window --location vsplit --copy-env lf -- $PWD
map ew $kitten @launch --location neighbor --type tab --copy-env --cwd $PWD
map eW $kitten @launch --location neighbor --type tab --copy-env lf -- $PWD
map <tab> $tabs="$(kitty @ ls|grep -v "         "|grep "       \"id\":\|       \"is_focused\": true,")"&&kitty @ focus-tab --match "id:$(echo -e "$(echo "$tabs"|tail -n 1)\n$tabs\n$(echo "$tabs"|tac|tail -n 1)"|grep -C 1 "focus"|tail -n 1|tr -dc "0-9")"
map <backtab> $tabs="$(kitty @ ls|grep -v "         "|grep "       \"id\":\|       \"is_focused\": true,"|tac)"&&kitty @ focus-tab --match "id:$(echo -e "$(echo "$tabs"|grep -v "focus"|tail -n 1)\n$tabs\n$(echo "$tabs"|grep -v "focus"|tac|tail -n 1)"|tac|grep -B 2 -A 1 "focus"|tac|tail -n 1|tr -dc "0-9")"
map gn $kitten @launch --location=neighbor --type tab --cwd current --copy-env lf

# navigation keybinds
map gi &lf -remote "send $id cd /run/media/$USER"
map gm cd /media
map gr cd /
map gd cd /dev
map ge cd /etc
map gM cd /mnt
map go cd /opt
map gs cd /srv
map gp cd /tmp
map gu cd /usr
map gv cd /var
map cd push :cd<space>

# new file/folder keybinds
map <f-7> push :mkdir<space>
map <insert> push :touch<space>

# rename keybinds
map c
map a rename # before extention
map I push a<c-a> # at the very beginning
map A push a<c-e> # at the very end
#map cw push A<c-u> # new rename

#smartbulkrename -- vimv if several items are selected
map cw &{{#Smart bulk rename
  set -f&&[[ $(echo "$fx"|wc -l)>1 ]]&&lf -remote "send $id bulkrename"||lf -remote "send $id push a<c-e><c-u>";lf -remote "send $id reload"}}


# undo keybinds
map u
map uv unselect
map uy clear
map ud clear
map um &{{#Unmount
  umount -l -- "$f"&&lf -remote "send $id :reload;echo Unmounted $f"||lf -remote "send $id echo Unmount failed."}}

# yank/cut keybinds
map y
map d
map yy copy
map yn &{{#Yank filenames
  basename -a -- $fx | head -c-1 | xclip -i -selection clipboard}}
map yp &{{#Yank directory
  printf "%s" "$PWD" | xclip -selection clipboard}}
map dd cut
map da sel-add move
map ya sel-add copy
map dr sel-remove move
map yr sel-remove copy
map dt sel-toggle move
map yt sel-toggle copy
# filespace keybinds
map du ${{#Directory disk usage
  clear&&du --max-depth=1 -h --apparent-size|less}}
map dU ${{#Directory disk usage sorted
  clear&&du --max-depth=1 -h --apparent-size | sort -rh|less}}
map df !{{#File system space usage
  clear&&df -h |grep -E "/dev/sd|/dev/nvme|Filesystem "}}

# paste keybinds
map p
map pp :paste; clear
map pi pasteand skip
map po pasteand overwrite
map pl symlink relative
map pL symlink absolute

# sort keybinds
map sn
map ss
map st
map sa
map sc
map se

map o
map zr
map on :set sortby natural; set noreverse; set info
map oN :set sortby natural; set reverse; set info
map os :set sortby size; set reverse; set info size
map oS :set sortby size; set noreverse; set info size
map om :set sortby time; set reverse; set info time
map oM :set sortby time; set noreverse; set info time
map oa :set sortby atime; set reverse; set info atime
map oA :set sortby atime; set noreverse; set info atime
map oc :set sortby ctime; set reverse; set info ctime
map oC :set sortby ctime; set noreverse; set info ctime
map oe :set sortby ext; set noreverse; set info
map oE :set sortby ext; set reverse; set info
map or :set reverse!

# preview toggle
map zp toggle-preview

# chmod keybinds
map = :push :chmod<space>
map +X chmod +X
map +r chmod +r
map +s chmod +s
map +t chmod +t
map +w chmod +w
map +x chmod +x

map -X chmod -X
map -r chmod -r
map -s chmod -s
map -t chmod -t
map -w chmod -w
map -x chmod -x
